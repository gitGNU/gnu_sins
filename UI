In order to provide a new interface to SINS you'll need to implement
a set of functions in a file and add a build rule in src/Makefile.

See other binaries (X-sins, for example) in src/Makefile to see how
to do that. Your object file must be linked against $(OBJ) and $(MODULES)
to obtain a complete binary.

This is a list of UI module exported functions:

	-- Initialize module. Register commands here.
	int ui_init ();

	-- Initialize arena. Argument is the arena structure with
	-- possible dimensions defined.
	int ui_initarena (ARENA *);

	-- Finish ui work... cleanup interface here.
	void ui_finish (void);

	-- Draw the arena. Called on each iteration
	void ui_drawarena (ARENA *);

	-- Draw a message.
	void ui_drawmessage (char *);

	-- Get a string from the user and return it
	char *ui_prompt (char *);

	-- Get an ascii character as pressed on the keyboard.
	-- This function is called until it return -1
	-- Buffering is considered ...
	int ui_getkey (void);


As you can see there is no event-based architecture for the user interface.
Each interface must keep a copy of the old arena in order to detect
actual changes between calls or refresh the whole thing.

Basically, the UI module is just a renderer of each frame of the game
movie, and a mean to obtain user input. Simple as it sound.
